# workflow name
name: release

# on events
on:
  release:
    types:
      - created

# jobs
jobs:
  # generate build cross-platform build files
  release:
    name: Generate cross-platform builds
    strategy:
      matrix:
        go_version:
          - 1.16.x
    runs-on: ubuntu-latest
    steps:
      # step 1: checkout repository code
      - name: Checkout the repository
        uses: actions/checkout@v2

      # step 2: set workflow variables
      - name: Initialize workflow variables
        id: vars
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
          echo ::set-output name=BUILDDATE::$(date '+%F-%T')
          echo ::set-output name=COMMIT::$(git rev-parse --verify HEAD)
          echo ::set-output name=APP_NAME::$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')

          if [ ! -z $DOCKER_TOKEN ]; then echo ::set-output name=HAS_DOCKER_TOKEN::${HAS_DOCKER_TOKEN}; fi
        env:
          DOCKER_TOKEN: "${{ secrets.DOCKER_TOKEN }}"

      # step 3: generate build files
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: build frontend
        run: cd ./view && npm install && npm run build
      - name: Generate build files
        uses: crazy-max/ghaction-xgo@v1
        with:
          xgo_version: latest
          go_version: ${{ matrix.go_version }}
          dest: build
          prefix: ${{steps.vars.outputs.APP_NAME}}
          targets: windows/386,windows/amd64,linux/386,linux/amd64,darwin/386,darwin/amd64,linux/386,linux/arm64
          v: true
          x: false
          ldflags: -w -s -X main.Version=${{steps.vars.outputs.VERSION}} -X main.BuildDate=${{steps.vars.outputs.BUILDDATE}} -X main.Commit=${{steps.vars.outputs.COMMIT}} -X main.Mode=prod

      # step 4: compress build files
      - name: Compress build files
        run: cd ./build && for i in *; do tar -czf $i.tar.gz $i; done && cd ..

      # step 5: upload build-artifacts
      - name: Upload build-artifacts
        uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: "./build/*.tar.gz"

      # step 6: build docker image & upload
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # step 6.1: push to DockerHub
      - name: Login to DockerHub
        if: ${{ steps.vars.outputs.HAS_DOCKER_TOKEN == 'true' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push Docker images
        if: ${{ steps.vars.outputs.HAS_DOCKER_TOKEN == 'true' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
          build-args: |
            APP_NAME=${{steps.vars.outputs.APP_NAME}}
            VERSION=${{steps.vars.outputs.VERSION}}
            BUILDDATE=${{steps.vars.outputs.BUILDDATE}}
            COMMIT=${{steps.vars.outputs.COMMIT}}

      # step 6.2: push to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ghcr.io/${{ github.repository }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_NAME=${{steps.vars.outputs.APP_NAME}}
            VERSION=${{steps.vars.outputs.VERSION}}
            BUILDDATE=${{steps.vars.outputs.BUILDDATE}}
            COMMIT=${{steps.vars.outputs.COMMIT}}
